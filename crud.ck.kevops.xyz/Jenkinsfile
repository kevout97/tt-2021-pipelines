///////////////////////////////////////////////////////////
// Call trans opt: received. 2-19-98 13:24:18 REC:Loc    //
//                                                       //
//      Trace program: running                           //
//                                                       //
//            wake up, Neo...                            //
//         the matrix has you                            //
//       follow the white rabbit.                        //
//                                                       //
//           knock, knock, Neo.                          //
//                                                       //
//                         (`.         ,-,               //
//                         ` `.    ,;' /                 //
//                          `.  ,'/ .'                   //
//                           `. X /.'                    //
//                 .-;--''--.._` ` (                     //
//               .'            /   `                     //
//              ,           ` '   Q '                    //
//              ,         ,   `._    \                   //
//           ,.|         '     `-.;_'                    //
//           :  . `  ;    `  ` --,.._;                   //
//            ' `    ,   )   .'                          //
//               `._ ,  '   /_                           //
//                  ; ,''-,;' ``-                        //
//                   ``-..__``--`                        //
///////////////////////////////////////////////////////////

GIT_CREDENTIAL     = "tt-github-credential"
GIT_URL            = "https://github.com/kevout97/tt-2021-crud.git"
GIT_BRANCH         = "main"
GIT_PROYECT        = "tt-2021-crud"
TT_CONTAINER       = "${env.JOB_NAME}"
TT_DBDATABASE      = "tt-db"
TT_DBPORT          = "3306"
TT_PORT            = "8080"

withCredentials([string(credentialsId: 'tt-mysql-host', variable: 'MYSQLHOST')]) {
    TT_DBHOST      = "${MYSQLHOST}"
}

withCredentials([usernamePassword(credentialsId: 'tt-mysql-credential', usernameVariable: 'MYSQLUSER', passwordVariable: 'MYSQLPASS')]){
    TT_DBUSER       = "${MYSQLUSER}"
    TT_DBPASSWORD   = "${MYSQLPASS}"
}

AGENT_LABEL    = "jenkins-ckdply01-1"


pipeline{
    agent{
        label "${AGENT_LABEL}"
    }
    stages{
        stage("Clean old container and old image"){
            steps{
                catchError([buildResult: "SUCCESS"]){
                    sh """
                        docker rm -f ${TT_CONTAINER}
                    """
                    sh """
                        docker rmi -f \$(docker images | grep ${env.JOB_NAME} | '{print \$1\":\"\$2}')
                    """
                }
            }
        }

        stage("Clonning Source Code"){
            steps{
                sh"""
                    rm -rf ${GIT_PROYECT}
                    mkdir ${GIT_PROYECT}
                """
                dir("${GIT_PROYECT}"){
                    git credentialsId: "${GIT_CREDENTIAL}" , url: "${GIT_URL}", branch: "${GIT_BRANCH}"
                }
            }
        }

        stage("Build image"){
            steps{
                dir("${GIT_PROYECT}"){
                    script {
                        docker.build("${JOB_NAME}:v${env.BUILD_ID}")
                    }
                }
            }
        }

        stage("Push image"){
            steps{
                script{
                    def customImage = docker.image("${env.JOB_NAME}:v${env.BUILD_ID}")
                    // customImage.push()
                }
            }
        }

        stage("Scanning"){
            parallel{
                stage("Scanning image"){
                    steps{
                        echo "Scanning image"
                        sleep 10
                    }
                }

                stage("Scanning source code"){
                    steps{
                        echo "Scanning source code"
                        sleep 15
                    }
                }
            }
        }

        stage("Deploying new image "){
            steps{
                script{
                    def customImage = docker.image("${env.JOB_NAME}:v${env.BUILD_ID}")
                    customImage.run("-itd --name $TT_CONTAINER --restart unless-stopped -p $TT_PORT:$TT_PORT -v /etc/localtime:/etc/localtime:ro -e TT_PORT=$TT_PORT -e TT_DBDATABASE=$TT_DBDATABASE -e TT_DBHOST=$TT_DBHOST -e TT_DBPORT=$TT_DBPORT -e TT_DBUSER=$TT_DBUSER -e TT_DBPASSWORD=$TT_DBPASSWORD")
                }
            }
        }

        stage("Create Report"){
            steps{
                echo "Test"
            }
        }
    }
    post{
        success{
            echo "Send notification"
        }
        failure{
            echo "Send notification"
        }
    }
}